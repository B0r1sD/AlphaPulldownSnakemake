import sys
from sys import exit
from os.path import abspath, join, splitext, basename
from source.input_parser import InputParser

configfile: "config/config.yaml"
config["input_file"] = abspath(config["input_file"])
config["output_directory"] = abspath(config["output_directory"])

protein_delimiter = config.get("protein_delimiter", ";")

dataset = InputParser.from_file(
    filepath = config["input_file"],
    file_format = "alphaabriss",
    protein_delimiter = protein_delimiter
)


ruleorder: symlink_local_files > download_uniprot

rule all:
    input:
        join(
            config["output_directory"], "reports", "report.html"
        ),

rule symlink_local_files:
    input:
        dataset.sequences_by_origin["local"],
    output:
        [
            join(config["output_directory"], "data", f"{splitext(basename(x))[0]}.fasta")
            for x in dataset.sequences_by_origin["local"]

        ],
    resources:
        avg_mem = lambda wildcards, attempt: 600 * attempt,
        mem_mb = lambda wildcards, attempt: 800 * attempt,
        walltime = lambda wildcards, attempt: 10 * attempt,
        attempt = lambda wildcards, attempt: attempt,
    run:
        dataset.symlink_local_files(output_directory = join(config["output_directory"], "data"))

rule download_uniprot:
    output:
        join(config["output_directory"], "data", "{uniprot_id}.fasta"),
    resources:
        avg_mem = lambda wildcards, attempt: 600 * attempt,
        mem_mb = lambda wildcards, attempt: 800 * attempt,
        walltime = lambda wildcards, attempt: 10 * attempt,
        attempt = lambda wildcards, attempt: attempt,
    shell:"""
        temp_file=$(mktemp)
        curl -o ${{temp_file}} https://rest.uniprot.org/uniprotkb/{wildcards.uniprot_id}.fasta
        echo ">{wildcards.uniprot_id}" > {output}
        tail -n +2 ${{temp_file}} >> {output}
        """


rule create_features:
    input:
        join(config["output_directory"], "data", "{fasta_basename}.fasta"),
    output:
        join(config["output_directory"], "features", "{fasta_basename}.pkl"),
    params:
        data_directory = config["alphafold_data_directory"],
        output_directory = join(config["output_directory"], "features"),
        save_msa = config.get("save_msa", False),
        use_precomputed_msa = config.get("use_precomputed_msa", True),
    resources:
        mem_mb = lambda wildcards, attempt: 64000 * attempt,
        walltime = lambda wildcards, attempt: 1440 * attempt,
        attempt = lambda wildcards, attempt: attempt,
    threads: 8, # everything is harcoded in AF anyways ...
    conda:
        "envs/alphapulldown.yaml",
    container:
       "docker://dquz/fold:latest",
    shell:"""
        create_individual_features.py \
            --fasta_paths={input} \
            --data_dir={params.data_directory} \
            --output_dir={params.output_directory} \
            --save_msa_files={params.save_msa} \
            --use_precomputed_msas={params.use_precomputed_msa} \
            --max_template_date=2050-01-01 \
            --skip_existing=False
        """

memscaling_inference = config["alphafold_inference_threads"] / 8
rule alphafold_inference:
    input:
        lambda wildcards : [join(
            config["output_directory"], "features", f"{feature}.pkl")
            for feature in dataset.sequences_by_fold[wildcards.fold]],
    output:
        join(
            config["output_directory"],
            "predictions", "{fold}", "completed_fold.txt"
        ),
    params:
        data_directory = config["alphafold_data_directory"],
        predictions_per_model = config["predictions_per_model"],
        n_recycles = config["number_of_recycles"],
        feature_directory = join(config["output_directory"], "features"),
        output_directory = lambda wildcards: join(
            config["output_directory"], "predictions", wildcards.fold
        ),
        requested_fold = lambda  wildcards : wildcards.fold,
        protein_delimiter = protein_delimiter,
    resources:
        mem_mb = lambda wildcards, attempt: 128000 * attempt * memscaling_inference,
        walltime = lambda wildcards, attempt: 1440 * attempt,
        attempt = lambda wildcards, attempt: attempt,
        slurm = config.get("alphafold_inference", ""),
    threads:
        config["alphafold_inference_threads"],
    conda:
        "envs/alphapulldown.yaml",
    container:
       "docker://dquz/fold:latest",
    shell:"""
        python3 workflow/source/alphafold_inference.py \
            --input {params.requested_fold} \
            --output_directory={params.output_directory} \
            --num_cycle={params.n_recycles} \
            --num_predictions_per_model={params.predictions_per_model} \
            --data_dir={params.data_directory} \
            --features_directory={params.feature_directory} \
            --protein_delimiter {params.protein_delimiter}
        echo "Completed" > {output}
        """

rule generate_report:
    input:
        [join(
            config["output_directory"],
            "predictions", fold, "completed_fold.txt"
        ) for fold in dataset.fold_specifications
        ],
    output:
        join(
            config["output_directory"], "reports", "report.html"
        ),
    resources:
        mem_mb = lambda wildcards, attempt: 32000 * attempt,
        walltime = lambda wildcards, attempt: 1440 * attempt,
        attempt = lambda wildcards, attempt: attempt,
    params:
        prediction_dir = join(config["output_directory"], "predictions"),
        report_dir = join(config["output_directory"], "reports"),
        report_cutoff = config["report_cutoff"],
    conda:
        "envs/alphapulldown.yaml",
    container:
       "docker://dquz/fold:latest",
    shell:"""
        cd {params.prediction_dir}
        create_notebook.py \
            --cutoff={params.report_cutoff} \
            --output_dir={params.prediction_dir}
        jupyter nbconvert --to html --execute output.ipynb
        mv output.ipynb {params.report_dir}
        mv output.html {output}
        """
